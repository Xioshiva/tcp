import java_cup.runtime.*;
import java.util.Vector;
import java.io.*;
import java.util.*;

action code {:
// jdjdjd
    
:}

terminal PRG, STARTPRG, ENDPRG, CONSTANT, SEMICOLON, STARTFUNC, ENDFUNC, OPENPARENT;
terminal CLOSEPARENT, COMMA, EQUAL, DOUBLEPOINTS, OPENBRACK, CLOSEBRACK;
terminal READ, WRITE, RETURN, IF, THEN, ELSE, ENDIF, WHILE, DO, ENDWHILE;
terminal FOR, FROM, TO, ENDFOR, TRUE, FALSE,  PLUS, MINUS, TIMES, DIVIDE;
terminal EQUALS, DIFF, INF, INFEQUAL, SUP, SUPEQUAL, AND, OR, TILDA, NOT;

terminal String IDENT, STRINGCONST, TINTEGER, TBOOLEAN;
terminal int INTEGERCONST;

// Non terminal rules that return a RESULT value
non terminal DeclarationProgramme program, header;
non terminal Bloc declar_lst, body;
non terminal ArrayList<Instruction> instr_lst, declars, declar, declar_var;
non terminal declar_const;
non terminal Expression expr, access, operand;
non terminal for_instr;
non terminal while_instr;
non terminal return_instr;
non terminal cond_instr;
non terminal write_instr;
non terminal read_instr;
non terminal Instruction instr;
non terminal Affectation assign;
non terminal index;
non terminal op_una;
non terminal Binaire op_bin;

non terminal l_ident;
non terminal type;
non terminal typebase;

// Precedences
precedence left PLUS, MINUS, TIMES, DIVIDE, EQUALS, DIFF;
precedence left INF, SUP, INFEQUAL, SUPEQUAL, AND, OR, DOUBLEPOINTS;
precedence right TILDA, NOT;

program           ::= header:p declar_lst STARTPRG body:instructions ENDPRG
                    {:  p.setInstructions(instructions);
                        System.out.println("ok, c'est good !!!!"); 
                        RESULT = p;
                    :};
header            ::= PRG IDENT:id {: RESULT = new DeclarationProgramme(new Idf(id, "", idleft, idright), "", idleft, idright); :};



declar_lst        ::=  declars:d {: RESULT = new Bloc(d, "", dleft, dright); :};

declars           ::= {: RESULT= new ArrayList(); :}
                      | declars:ds declar:d {: ds.add(d); RESULT = ds;:};

declar            ::= declar_var:dv {: RESULT = dv; :}
                      | declar_const:dc {: RESULT = dc; :};

declar_var        ::= type:t l_ident:l SEMICOLON:s   {: RESULT = new DeclarVariable(t.toString(), l, "", sleft, sright);:};

l_ident           ::= IDENT:i {: ArrayList<Idf> lst = new ArrayList<>(); 
                                  lst.add(new Idf(i, "", ileft, iright)); 
                                  RESULT = lst; :}
                      | l_ident:l COMMA IDENT:i {: l.add(new Idf(i, "", ileft, iright)); RESULT = i; :};

type              ::= typebase:t {: RESULT = t;  :};

typebase          ::= TINTEGER {: RESULT = "integer";  :}
                      | TBOOLEAN {: RESULT = "boolean";  :};
                      
declar_const      ::= CONSTANT type:t IDENT:i EQUAL:e expr:ex SEMICOLON:s   {: RESULT = new DeclarConst(t.toString(), new Idf(i, "", ileft, iright), ex, "", sright, sleft); :};



expr              ::= expr:left op_bin:op expr:right
                      {:
                       // build binary expression
                         op.lierGauche(left);
                         op.lierDroit(right);
                         RESULT = op;  
                      :}
                      | op_una:o expr:e {: o.lierExpression(e); :}
                      | OPENPARENT:o expr:e CLOSEPARENT:c {: RESULT = new Parenthese(e, "", oleft, oright); :}
                      | operand:operand             {:  RESULT = operand;  :};



op_bin            ::= PLUS:o     {: RESULT = new Addition("", oleft, oright); :}
                      | MINUS:o    {: RESULT = new Soustraction("", oleft, oright);  :}
                      | TIMES:o    {: RESULT = new Multiplication("", oleft, oright); :}
                      | DIVIDE:o   {: RESULT = new Division("", oleft, oright); :}
                      | EQUALS:o {: RESULT = new Egal("", oleft, oright); :} 
                      | DIFF:o     {: RESULT = new Different("", oleft, oright); :}
                      | INF:o      {: RESULT = new Inferieur("", oleft, oright); :}
                      | SUP:o      {: RESULT = new Superieur("", oleft, oright);  :}
                      | INFEQUAL:o {: RESULT = new InfEgal("", oleft, oright); :}
                      | SUPEQUAL:o {: RESULT = new SupEgal("", oleft, oright);   :}
                      | AND:o      {: RESULT = new Et("", oleft, oright);:}
                      | OR:o       {: RESULT = new Ou("", oleft, oright); :};


op_una            ::= TILDA:o      {: RESULT = new Tilda("", oleft, oright);:}
                      | NOT:o      {: RESULT = new Non("", oleft, oright);  :}
                      | MINUS:o    {: RESULT = new Moins("", oleft, oright);  :};

                      
operand           ::= access:access       {: RESULT = access; :}
                      | INTEGERCONST:ib   {: RESULT = new Nombre(ib, "", ibleft, ibright); :}
                      | TRUE:t           {: RESULT = new Vrai("", tleft, tright); :}
                      | FALSE:f           {:  RESULT = new Faux("", fleft, fright); :};


access            ::= IDENT:i   {: RESULT = new Idf(i, "", ileft, iright); :};
body              ::= instr_lst:i {: RESULT = new Bloc(i, "", ileft, iright); :};

instr_lst         ::= {: RESULT = new ArrayList(); :}
                      | instr_lst:il instr:i
                      {:
                        ArrayList<Instruction> instr= new ArrayList<>(il);
                        instr.add(i);
                        RESULT = instr;
                      :};
instr             ::= assign:inst        {: RESULT = inst;  :}
                      | write_instr:inst {:  RESULT = inst; :}
                      | read_instr:inst  {:  RESULT = inst; :}
                      | cond_instr:inst  {:  RESULT = inst; :}
                      | while_instr:inst {:  RESULT = inst;  :}
                      | for_instr:inst   {:  RESULT = inst;  :};
assign            ::= access:a EQUAL:e expr:expr SEMICOLON:s {: RESULT = new Affectation(a, expr, "", sleft, sright); :};


write_instr       ::= WRITE expr:e SEMICOLON:s {: RESULT = new Ecrire(e, "", sleft, sright); :}
                      | WRITE STRINGCONST:strcst SEMICOLON:s  {: RESULT = new Ecrire(strcst, "", sleft, sright);  :};

read_instr        ::= READ IDENT:i SEMICOLON:s   {: RESULT = new Lire(new Idf(i, "", ileft, iright), "", sleft, sright);  :};


cond_instr        ::= IF:o expr:e THEN body:b ELSE body:b2 ENDIF {: RESULT = new SiAlorsSinon(e, b.getInstructions(), b2.getInstructions(), "", oleft, oright);:}
                      | IF:o expr:e THEN body:b ENDIF {: RESULT = new SiAlors(e, b.getInstructions(), "", oleft, oright);  :};
while_instr       ::= WHILE:o expr:e DO body:lstInstr ENDWHILE {: RESULT = new TantQue(e, lstInstr.getInstructions(), "", oleft, oright);   :};
for_instr         ::= FOR:o IDENT:id FROM expr:brnInf TO expr:brnSup DO body:lstInstr ENDFOR {: RESULT = new Pour( new Idf(id, "", idleft, idright), brnInf, brnSup, lstInstr.getInstructions(), "", oleft, oright); :};